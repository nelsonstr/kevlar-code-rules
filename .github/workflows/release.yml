name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      dry_run:
        description: 'Dry run (no actual release)'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.9'
  MAVEN_OPTS: '-Xmx2048m -XX:+TieredCompilation -XX:TieredStopAtLevel=1'

jobs:
  # ========================================================================
  # PREPARE RELEASE
  # ========================================================================
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Auto-increment version based on release type
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
            IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
            
            case "${{ github.event.inputs.release_type }}" in
              "major")
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                ;;
              "minor")
                MINOR=$((MINOR + 1))
                PATCH=0
                ;;
              "patch")
                PATCH=$((PATCH + 1))
                ;;
            esac
            
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=v${VERSION}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
      
      - name: Generate changelog
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const { data: commits } = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: 'main',
              head: context.sha
            });
            
            let changelog = `## What's Changed\n\n`;
            
            const categories = {
              'feat': '🚀 Features',
              'fix': '🐛 Bug Fixes',
              'docs': '📚 Documentation',
              'style': '💄 Styles',
              'refactor': '♻️ Refactoring',
              'perf': '⚡ Performance',
              'test': '🧪 Tests',
              'build': '🔧 Build',
              'ci': '👷 CI/CD',
              'chore': '🔨 Chores'
            };
            
            const categorized = {};
            
            for (const commit of commits.commits) {
              const message = commit.commit.message;
              const match = message.match(/^(\w+)(?:\(([^)]+)\))?:\s*(.+)/);
              
              if (match) {
                const [, type, scope, description] = match;
                const category = categories[type] || '📝 Other';
                
                if (!categorized[category]) {
                  categorized[category] = [];
                }
                
                const scopeText = scope ? `**${scope}:** ` : '';
                categorized[category].push(`- ${scopeText}${description} ([${commit.sha.substring(0, 7)}](${commit.html_url}))`);
              }
            }
            
            for (const [category, items] of Object.entries(categorized)) {
              if (items.length > 0) {
                changelog += `### ${category}\n\n`;
                changelog += items.join('\n') + '\n\n';
              }
            }
            
            changelog += `## 📦 Installation\n\n`;
            changelog += `\`\`\`xml\n`;
            changelog += `<dependency>\n`;
            changelog += `  <groupId>org.github.nelsonstr</groupId>\n`;
            changelog += `  <artifactId>kevlar-code-rules</artifactId>\n`;
            changelog += `  <version>${context.outputs.version}</version>\n`;
            changelog += `</dependency>\n`;
            changelog += `\`\`\`\n\n`;
            
            changelog += `## 🔗 Links\n\n`;
            changelog += `- [Documentation](https://nelsonstr.github.io/kevlar-code-rules/)\n`;
            changelog += `- [GitHub Repository](https://github.com/nelsonstr/kevlar-code-rules)\n`;
            changelog += `- [Issues](https://github.com/nelsonstr/kevlar-code-rules/issues)\n`;
            
            core.setOutput('changelog', changelog);
      
      - name: Update version in POM
        run: |
          mvn versions:set -DnewVersion=${{ steps.version.outputs.version }} -DgenerateBackupPoms=false
          mvn versions:commit
      
      - name: Commit version update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}"
          git push origin main

  # ========================================================================
  # BUILD RELEASE
  # ========================================================================
  build:
    name: Build Release
    runs-on: ubuntu-latest
    needs: prepare
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build and test
        run: mvn clean verify -B
      
      - name: Generate site
        run: mvn site:site -B
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.prepare.outputs.version }}
          path: |
            target/*.jar
            target/*.war
            target/*.ear
            target/site/
          retention-days: 30

  # ========================================================================
  # CREATE RELEASE
  # ========================================================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.prepare.outputs.version }}
          path: artifacts
      
      - name: Setup GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: 'maven'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Sign and deploy artifacts
        run: mvn deploy -B -P release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create Git tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a ${{ needs.prepare.outputs.tag }} -m "Release ${{ needs.prepare.outputs.version }}"
          git push origin ${{ needs.prepare.outputs.tag }}
      
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          release_name: Release ${{ needs.prepare.outputs.version }}
          body: ${{ needs.prepare.outputs.changelog }}
          draft: false
          prerelease: false
      
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/*.jar
          asset_name: kevlar-code-rules-${{ needs.prepare.outputs.version }}.jar
          asset_content_type: application/java-archive

  # ========================================================================
  # DEPLOY DOCUMENTATION
  # ========================================================================
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.prepare.outputs.version }}
          path: artifacts
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./artifacts/target/site
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'

  # ========================================================================
  # NOTIFICATIONS
  # ========================================================================
  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [prepare, build, create-release, deploy-docs]
    if: always() && ${{ !github.event.inputs.dry_run }}
    
    steps:
      - name: Notify on success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#releases'
          text: '🎉 Release ${{ needs.prepare.outputs.version }} published for ${{ github.repository }}'
      
      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          channel: '#releases'
          text: '❌ Release ${{ needs.prepare.outputs.version }} failed for ${{ github.repository }}' 